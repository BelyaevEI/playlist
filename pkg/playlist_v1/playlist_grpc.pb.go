// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: playlist.proto

package playlist_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PlaylistV1_AddSong_FullMethodName    = "/playlist_v1.PlaylistV1/AddSong"
	PlaylistV1_DeleteSong_FullMethodName = "/playlist_v1.PlaylistV1/DeleteSong"
	PlaylistV1_PlaySong_FullMethodName   = "/playlist_v1.PlaylistV1/PlaySong"
	PlaylistV1_PauseSong_FullMethodName  = "/playlist_v1.PlaylistV1/PauseSong"
	PlaylistV1_NextSong_FullMethodName   = "/playlist_v1.PlaylistV1/NextSong"
	PlaylistV1_PrevSong_FullMethodName   = "/playlist_v1.PlaylistV1/PrevSong"
)

// PlaylistV1Client is the client API for PlaylistV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistV1Client interface {
	AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PlaySong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PauseSong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NextSong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PrevSong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type playlistV1Client struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistV1Client(cc grpc.ClientConnInterface) PlaylistV1Client {
	return &playlistV1Client{cc}
}

func (c *playlistV1Client) AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlaylistV1_AddSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) DeleteSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlaylistV1_DeleteSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) PlaySong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlaylistV1_PlaySong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) PauseSong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlaylistV1_PauseSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) NextSong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlaylistV1_NextSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistV1Client) PrevSong(ctx context.Context, in *Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlaylistV1_PrevSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistV1Server is the server API for PlaylistV1 service.
// All implementations must embed UnimplementedPlaylistV1Server
// for forward compatibility
type PlaylistV1Server interface {
	AddSong(context.Context, *AddSongRequest) (*emptypb.Empty, error)
	DeleteSong(context.Context, *AddSongRequest) (*emptypb.Empty, error)
	PlaySong(context.Context, *Request) (*emptypb.Empty, error)
	PauseSong(context.Context, *Request) (*emptypb.Empty, error)
	NextSong(context.Context, *Request) (*emptypb.Empty, error)
	PrevSong(context.Context, *Request) (*emptypb.Empty, error)
	mustEmbedUnimplementedPlaylistV1Server()
}

// UnimplementedPlaylistV1Server must be embedded to have forward compatible implementations.
type UnimplementedPlaylistV1Server struct {
}

func (UnimplementedPlaylistV1Server) AddSong(context.Context, *AddSongRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedPlaylistV1Server) DeleteSong(context.Context, *AddSongRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedPlaylistV1Server) PlaySong(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaySong not implemented")
}
func (UnimplementedPlaylistV1Server) PauseSong(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSong not implemented")
}
func (UnimplementedPlaylistV1Server) NextSong(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSong not implemented")
}
func (UnimplementedPlaylistV1Server) PrevSong(context.Context, *Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrevSong not implemented")
}
func (UnimplementedPlaylistV1Server) mustEmbedUnimplementedPlaylistV1Server() {}

// UnsafePlaylistV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistV1Server will
// result in compilation errors.
type UnsafePlaylistV1Server interface {
	mustEmbedUnimplementedPlaylistV1Server()
}

func RegisterPlaylistV1Server(s grpc.ServiceRegistrar, srv PlaylistV1Server) {
	s.RegisterService(&PlaylistV1_ServiceDesc, srv)
}

func _PlaylistV1_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistV1_AddSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).AddSong(ctx, req.(*AddSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistV1_DeleteSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).DeleteSong(ctx, req.(*AddSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_PlaySong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).PlaySong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistV1_PlaySong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).PlaySong(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_PauseSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).PauseSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistV1_PauseSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).PauseSong(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_NextSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).NextSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistV1_NextSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).NextSong(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistV1_PrevSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistV1Server).PrevSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistV1_PrevSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistV1Server).PrevSong(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistV1_ServiceDesc is the grpc.ServiceDesc for PlaylistV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playlist_v1.PlaylistV1",
	HandlerType: (*PlaylistV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSong",
			Handler:    _PlaylistV1_AddSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _PlaylistV1_DeleteSong_Handler,
		},
		{
			MethodName: "PlaySong",
			Handler:    _PlaylistV1_PlaySong_Handler,
		},
		{
			MethodName: "PauseSong",
			Handler:    _PlaylistV1_PauseSong_Handler,
		},
		{
			MethodName: "NextSong",
			Handler:    _PlaylistV1_NextSong_Handler,
		},
		{
			MethodName: "PrevSong",
			Handler:    _PlaylistV1_PrevSong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist.proto",
}
